# Makefile
SERVICE_FILE = ~/.config/systemd/user/ssh-agent.service

.PHONY: all update-system install-packages enable-services setup-git setup-zsh install-yay install-yay-packages \
        install-tailscale install-node install-go install-tfenv install-postgresql \
        install-redis install-protobuf install-gcloud install-rust \
        cpu-tweaks copy-dotfiles update_ssh_config add-ssh-agent-service cleanup 

all: update-system install-packages enable-services setup-git setup-zsh install-yay install-yay-packages \
     install-tailscale install-node install-go install-tfenv install-postgresql \
     install-redis install-protobuf install-gcloud install-rust \
     cpu-tweaks copy-dotfiles update_ssh_config add-ssh-agent-service cleanup 
	@echo "Setup complete! Reboot recommended."

update-system:
	@echo "Updating system..."
	sudo sed -i 's/^#\?ParallelDownloads = .*/ParallelDownloads = 10/' /etc/pacman.conf
	grep -q "^ParallelDownloads" /etc/pacman.conf || sudo sed -i '/^\[options\]/a ParallelDownloads = 10' /etc/pacman.conf
	sudo pacman -Syu --noconfirm

install-packages:
	@echo "Installing essential packages..."
	sudo pacman -S --noconfirm git curl wget zsh neovim tmux base-devel htop fzf ripgrep rsync unzip yazi ffmpeg 7zip jq poppler fd ripgrep fzf zoxide imagemagick nvm eza clang llvm lazygit bat terraform btop networkmanager

enable-services:
	@echo "Enabling services..."
	sudo systemctl enable --now bluetooth
	sudo systemctl enable --now sshd
	sudo systemctl enable --now NetworkManager
	# disable sleep and hibernate
	sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

setup-git:
	@echo "Setting up Git..."
	git config --global user.name "Nikola Zivkovic"
	git config --global user.email "x-nikola.zivkovic@transcarent.ai"

setup-zsh:
	@echo "Setting up Zsh..."
	sudo pacman -S --noconfirm zsh-syntax-highlighting zsh-autosuggestions
	@if [ ! -d "$$HOME/.oh-my-zsh" ]; then \
		sh -c "$$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; \
	fi
	# in order to execute this below it needs to be rerun where in zsh 
	@echo "Setting up Zsh plugins..."

setup-zshrc:
	@echo "Setting up Zsh configuration..."
	# Add custom Zsh configuration
	rm -f $$HOME/.zshrc
	echo 'export ZSH="$$HOME/.oh-my-zsh"' >> $$HOME/.zshrc
	echo 'ZSH_THEME="robbyrussell"' >> $$HOME/.zshrc
	echo 'CASE_SENSITIVE="true"' >> $$HOME/.zshrc
	echo "zstyle ':omz:update' frequency 5" >> $$HOME/.zshrc
	echo 'ZVM_INIT_MODE=sourcing' >> $$HOME/.zshrc
	echo 'setopt HIST_IGNORE_ALL_DUPS' >> $$HOME/.zshrc
	echo 'setopt HIST_IGNORE_SPACE' >> $$HOME/.zshrc
	echo 'setopt HIST_REDUCE_BLANKS' >> $$HOME/.zshrc
	echo 'setopt SHARE_HISTORY' >> $$HOME/.zshrc
	echo 'export LANG=en_US.UTF-8' >> $$HOME/.zshrc
	echo 'plugins=(git)' >> $$HOME/.zshrc
	echo 'source $$ZSH/oh-my-zsh.sh' >> $$HOME/.zshrc
	echo "source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ~/.zshrc
	echo "source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" >> ~/.zshrc
	echo 'source /usr/share/fzf/key-bindings.zsh' >> $$HOME/.zshrc
	echo 'export NVM_DIR="$$HOME/.nvm"' >> $$HOME/.zshrc
	echo 'source /usr/share/nvm/init-nvm.sh' >> $$HOME/.zshrc
	echo 'export EDITOR=nvim' >> $$HOME/.zshrc
	echo 'alias y="yazi"' >> $$HOME/.zshrc
	echo 'alias gs="git status"' >> $$HOME/.zshrc
	echo 'alias gdb="git branch -D $1"' >> $$HOME/.zshrc
	echo 'alias gcob="git checkout $1"' >> $$HOME/.zshrc
	echo 'alias gcom="git checkout main"' >> $$HOME/.zshrc
	echo 'alias gpm="git pull origin main"' >> $$HOME/.zshrc
	echo 'alias v="nvim $1"' >> $$HOME/.zshrc
	echo 'alias vc="nvim ~/.config/nvim"' >> $$HOME/.zshrc
	echo 'alias vzsh="nvim ~/.zshrc"' >> $$HOME/.zshrc
	echo 'alias ll="eza --long --color=always --icons=always"' >> $$HOME/.zshrc
	echo 'alias ls="eza --long --color=always --icons=always"' >> $$HOME/.zshrc
	echo 'alias l="eza --long --color=always --icons=always"' >> $$HOME/.zshrc
	echo 'alias cat="bat"' >> $$HOME/.zshrc
	echo 'alias z="zi"' >> $$HOME/.zshrc
	echo 'export XDG_CONFIG_HOME="$$HOME/.config"' >> $$HOME/.zshrc
	@echo "GOOGLE_APPLICATION_CREDENTIALS needs to be set to the path of your GCP credentials file"
	echo 'export GOOGLE_APPLICATION_CREDENTIALS="$$HOME/.gcp/dev-gcp.json"' >> $$HOME/.zshrc
	echo 'eval "$$(zoxide init zsh)"' >> $$HOME/.zshrc
	echo 'export PATH=$$PATH:$$GOROOT/bin:$$GOPATH/bin' >> $$HOME/.zshrc
	echo 'export PATH=$$PATH:$$HOME/projects/bin' >> $$HOME/.zshrc
	@echo "Don't forget to run 'source ~/.zshrc' to apply the changes."

install-yay:
	@echo "Checking if yay is installed..."
	@if ! command -v yay &> /dev/null; then \
		echo "yay not found, installing yay..."; \
		sudo pacman -S --noconfirm git base-devel; \
		git clone https://aur.archlinux.org/yay.git $$HOME/.yay; \
		cd $$HOME/.yay && makepkg -si --noconfirm; \
		cd $$HOME && rm -rf $$HOME/.yay; \
	else \
		echo "yay is already installed!"; \
	fi

install-yay-packages:
	@echo "Installing yay packages..."
	yay -S --noconfirm mockery

install-tailscale:
	@echo "Installing Tailscale..."
	curl -fsSL https://tailscale.com/install.sh | sh
	sudo systemctl enable --now tailscaled

install-node:
	@echo "Installing Node.js and npm..."
	sudo pacman -S --noconfirm nodejs npm

install-go:
	@echo "Installing Go..."
	sudo pacman -S --noconfirm go
	# Add Go environment setup to .zshrc
	echo 'export GOPATH=$$HOME/go' >> $$HOME/.zshrc
	echo 'export PATH=$$PATH:$$GOROOT/bin:$$GOPATH/bin' >> $$HOME/.zshrc
	@echo "Installing Go tools..."
	go install github.com/vektra/mockery/v2@latest
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
	go install github.com/google/wire/cmd/wire@latest
	go install gotest.tools/gotestsum@latest

install-tfenv:
	@echo "Installing tfenv..."
	rm -rf $$HOME/.tfenv
	git clone https://github.com/tfutils/tfenv.git $$HOME/.tfenv
	echo 'export PATH="$$HOME/.tfenv/bin:$$PATH"' >> $$HOME/.zshrc
	$$HOME/.tfenv/bin/tfenv install v1.6.2
	$$HOME/.tfenv/bin/tfenv use v1.6.2

install-postgresql:
	@echo "Installing PostgreSQL and pgvector..."
	sudo pacman -S --noconfirm postgresql postgresql-libs
	sudo rm -rf /var/lib/postgres/data # this will bite you
	sudo -u postgres initdb --locale=C.UTF-8 --encoding=UTF8 -D '/var/lib/postgres/data'
	rm -rf $$HOME/pgvector
	git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git $$HOME/pgvector
	cd $$HOME/pgvector && make && sudo make install
	rm -rf $$HOME/pgvector
	sudo -u postgres psql -c "CREATE ROLE nidzola WITH SUPERUSER CREATEDB CREATEROLE LOGIN;"
	sudo systemctl restart postgresql

install-redis:
	@echo "Installing Redis..."
	sudo pacman -S --noconfirm redis
	sudo systemctl enable --now redis

install-protobuf:
	@echo "Installing protobuf..."
	sudo pacman -S --noconfirm protobuf

install-gcloud:
	@echo "Installing Google Cloud SDK..."
	curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo pacman-key --add -
	sudo pacman -S --noconfirm python python-pip
	yay -S --noconfirm google-cloud-sdk

install-rust:
	@echo "Installing Rust..."
	curl https://sh.rustup.rs -sSf | sh
	sudo pacman -S --noconfirm python-virtualenv

cpu-tweaks:
	sudo pacman -S cpupower --noconfirm
	sudo systemctl enable --now cpupower.service
	sudo cpupower frequency-set -g schedutil

copy-dotfiles:
	rm -rf $$HOME/.tmux/plugins/tpm
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
	@if [ ! -d "$$HOME/projects/dotfiles" ]; then \
		echo "Cloning dotfiles repository..."; \
		git clone git@github.com:nidzola/dotfiles.git $$HOME/projects/dotfiles; \
	else \
		echo "Dotfiles repository already exists."; \
	fi
	@echo "Copying dotfiles..."
	cp -rf $$HOME/projects/dotfiles/linux/nvim $$HOME/.config
	cp $$HOME/projects/dotfiles/linux/.tmux.conf $$HOME/
	cp -rf $$HOME/projects/dotfiles/lazygit $$HOME/.config

update-ssh-config:
	sudo sed -i 's/^#\?TCPKeepAlive.*/TCPKeepAlive yes/' /etc/ssh/sshd_config
	sudo sed -i 's/^#\?ClientAliveInterval.*/ClientAliveInterval 60/' /etc/ssh/sshd_config
	sudo sed -i 's/^#\?ClientAliveCountMax.*/ClientAliveCountMax 10/' /etc/ssh/sshd_config
	sudo systemctl restart sshd

add-ssh-agent-service:
	@sudo grep -q "[Unit]" $(SERVICE_FILE) || sudo sed -i '/^$/a\
	[Unit]\
	Description=SSH key agent\
	After=network.target\
	\
	[Service]\
	ExecStart=/usr/bin/ssh-agent -D\
	Restart=always\
	\
	[Install]\
	WantedBy=default.target\
	' $(SERVICE_FILE)
	@systemctl --user enable --now ssh-agent
	@systemctl --user restart ssh-agent
	@echo 'export SSH_AUTH_SOCK=$$(find /tmp -type s -name agent.\* 2>/dev/null | head -n 1)' >> $$HOME/.zshrc
	@grep -qxF 'if ! ssh-add -l &>/dev/null; then' $$HOME/.zshrc || echo 'if ! ssh-add -l &>/dev/null; then \
    ssh-add ~/.ssh/id_ed25519 ~/.ssh/id_transcarent 2>/dev/null; \
	fi' >> $$HOME/.zshrc
	@ssh-add ~/.ssh/id_ed25519
	@ssh-add ~/.ssh/id_transcarent

cleanup:
	@echo "Cleaning up..."
	@if [ -n "$(pacman -Qdtq)" ]; then sudo pacman -Rns $(pacman -Qdtq) --noconfirm; else echo "No orphaned packages to remove."; fi

